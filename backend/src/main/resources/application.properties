# Server Configuration
# Use 8080 since Render listens on this port by default
server.port=8080
# Spring Application
spring.application.name=leave-management

# Database Configuration (Render uses environment variables)
spring.datasource.url=${DATABASE_URL:jdbc:mysql://localhost:3306/leave_management}
spring.datasource.username=${DATABASE_USERNAME:root}
spring.datasource.password=${DATABASE_PASSWORD:root}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.connection-timeout=30000
spring.datasource.validation-query=SELECT 1
spring.datasource.test-on-borrow=true
spring.datasource.test-while-idle=true
spring.datasource.time-between-eviction-runs-millis=60000
spring.datasource.min-evictable-idle-time-millis=1800000

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Email Configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${SMTP_USERNAME}
spring.mail.password=${SMTP_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=YOUR_GOOGLE_CLIENT_ID
spring.security.oauth2.client.registration.google.client-secret=YOUR_GOOGLE_CLIENT_SECRET
spring.security.oauth2.client.registration.google.redirect-uri=https://your-service.onrender.com/login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=email,profile,openid

# JWT Configuration
spring.security.jwt.secret=YOUR_LONG_SECURE_SECRET_KEY
spring.security.jwt.expiration=86400000

# Google Authenticator
google.authenticator.issuer=LeaveManagementSystem
google.authenticator.window-size=3

# Logging
logging.level.org.springframework.security=DEBUG
logging.level.com.africahr=DEBUG

# Swagger
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs

# CORS Configuration
spring.mvc.cors.allowed-origins=https://your-frontend.onrender.com
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.mvc.cors.allowed-headers=Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers
spring.mvc.cors.allow-credentials=true
